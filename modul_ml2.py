# -*- coding: utf-8 -*-
"""modul_ML2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TVbF_hw5cgKPvupp8JY8GZO5clagk8Yk

LANGKAH 2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

"""LANGKAH 3

"""

# Nama file sesuai dengan nama file yang Anda upload
file_name = 'german_credit_data.csv'
df = pd.read_csv(file_name)

#digunakan untuk menampilkan lima baris pertama dari DataFrame
print("5 baris pertama data:")
print(df.head())

"""LANGKAH 4

"""

#digunakan dalam pemrograman Python, khususnya dengan pustaka Pandas, untuk menampilkan informasi tentang sebuah DataFrame.
print("\nInformasi DataFrame:")
print(df.info())

#digunakan dalam pemrograman Python dengan pustaka Pandas untuk memberikan ringkasan statistik dari DataFrame.
print("\nStatistik Deskriptif:")
print(df.describe())

#digunakan dalam Python dengan pustaka Pandas untuk menampilkan ukuran dari sebuah DataFrame.
#menampilkan baris dan kolom
print("\nUkuran DataFrame (Baris, Kolom):")
print(df.shape)

"""LANGKAH 5

"""

#digunakan dalam Python dengan pustaka Pandas untuk menampilkan nilai dari kolom tertentu dalam DataFrame.
print("\nKolom 'Credit amount':")
print(df['Credit amount'].head())

#yang berguna untuk menganalisis hubungan antara kedua variabel tersebut dan mendapatkan wawasan lebih lanjut tentang data Anda.
print("\nKolom 'Credit amount' dan 'Age':")
print(df[['Credit amount', 'Age']].head())

# digunakan dalam Python dengan pustaka Pandas untuk menyaring dan menampilkan subset dari DataFrame berdasarkan kondisi tertentu.
filtered_data = df[df['Duration'] > 20]
print("\nData dengan 'Duration' lebih dari 20:")
print(filtered_data.head())

"""LANGKAH 6"""

#digunakan dalam Python dengan pustaka Pandas untuk membersihkan DataFrame dengan menghapus baris yang memiliki nilai yang hilang (missing values).
df_cleaned = df.dropna()
print("\nData setelah menghapus baris dengan nilai yang hilang:")
print(df_cleaned.info())

print(df)

df['Age'] = pd.to_numeric(df['Age'], errors='coerce') # Mengubah kolom ke tipe numerik
df['Age'] = df['Age'].fillna(df['Age'].mean())
print("\nData setelah mengisi nilai yang hilang pada kolom 'Age':")
print(df.head())
#DataFrame tidak hanya terformat dengan benar sebagai tipe data numerik tetapi juga tidak memiliki nilai yang hilang, sehingga siap untuk analisis lebih lanjut.

"""LANGKAH 7"""

#digunakan dalam Python dengan pustaka Pandas untuk menghitung rata-rata dari kolom "Credit amount" berdasarkan grup tertentu.
grouped_data = df.groupby('Credit amount')['Credit amount'].mean()
print("\nRata-rata 'Credit amount' per jumlah 'Credit amount':")
print(grouped_data)

#digunakan dalam Python dengan pustaka Pandas untuk mengurutkan DataFrame berdasarkan kolom tertentu.
sorted_df = df.sort_values(by='Purpose', ascending=False)
print("\nData diurutkan berdasarkan 'purpose' secara descending:")
print(sorted_df.head())

"""LANGKAH 8"""

#untuk menghitung dan memvisualisasikan frekuensi dari setiap kategori dalam kolom "Purpose"
#dari DataFrame menggunakan pustaka Pandas dan Matplotlib. Berikut adalah penjelasan dari setiap langkah:
df['Purpose'].value_counts().plot(kind='bar')
plt.title(' Purpose ')
plt.xlabel('Jumlah payment')
plt.ylabel('jumlah')
plt.show()

#untuk membuat plot sebar (scatter plot) yang menunjukkan hubungan antara dua variabel dalam DataFrame, yaitu "Credit amount" dan "Duration"
plt.scatter(df['Credit amount'], df['Duration'])
plt.title('Hubungan antara Credit amount dan Duration')
plt.xlabel('Credit amount')
plt.ylabel('Duration')
plt.show()

"""LANGKAH 9"""

print(df)

#digunakan untuk melakukan konversi variabel kategorikal dalam DataFrame menjadi variabel dummy (one-hot encoding) menggunakan pustaka Panda
df = pd.get_dummies(df, columns=['Saving accounts','Age','Housing','Sex','Checking account','Purpose'], drop_first=True)
print("\nData setelah konversi kolom 'payment_method' menjadi variabel dummy:")
print(df.head())

#digunakan untuk mempersiapkan data sebelum pelatihan model machine learning.
X = df.drop('Credit amount', axis=1)
y = df['Credit amount']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""LANGKAH 10


"""

#berikan digunakan untuk membuat dan melatih model regresi linier menggunakan pustaka scikit-learn
model = LinearRegression()
model.fit(X_train, y_train)

#untuk melakukan prediksi menggunakan model regresi linier yang telah dilatih dan mengevaluasi kinerja model tersebu
y_pred = model.predict(X_test)
from sklearn.metrics import mean_squared_error, r2_score
print("\nMean Squared Error:", mean_squared_error(y_test, y_pred))
print("R^2 Score:", r2_score(y_test, y_pred))